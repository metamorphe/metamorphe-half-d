<%= javascript_include_tag 'metamorphehalf/DimensionsPreview', 'data-turbolinks-track' => true %>
<script type="text/javascript">
var env;
var dim;
var lambertMaterial = new THREE.MeshPhongMaterial({
						        specular: '#a9fcff',
						        color: '#00abb1',
						        ambient: new THREE.Color( 0xffffff ),
						        // dark
						        specular: new THREE.Color( 0x111111 ),
						        emissive: new THREE.Color( 0x000000 ),
						        side: THREE.DoubleSide,
						        shininess: 30
						      });
var lambertRedMaterial = new THREE.MeshBasicMaterial({
						        specular: '#a9fcff',
						        color: '#ef3340',
						        ambient: new THREE.Color( 0xffffff ),
						        // dark
						        specular: new THREE.Color( 0x111111 ),
						        emissive: new THREE.Color( 0x000000 ),
						        side: THREE.DoubleSide,
						        // shininess: 30, 
						       
						      });
var lambertMaterial2 = new THREE.MeshPhongMaterial({
						        specular: '#a9fcff',
						        color: '#00abb1',
						        ambient: new THREE.Color( 0xffffff ),
						        // dark
						        specular: new THREE.Color( 0x111111 ),
						        emissive: new THREE.Color( 0x000000 ),
						        side: THREE.DoubleSide,
						        shininess: 30, 
						        wireframe: true
						      });
var stl, carpal, gui;
var configs = <%= @configs.to_json.html_safe %>;
var filepath = "<%= @filepath %>";

$(function(){
	
	env = new WebEnv($("#ThreeJS"));
	env.camera.position.set(0, -100, 0);
	env.camera.lookAt(env.scene.position);	

	var loader = new THREE.STLLoader();
	addAxes(env);
	loader.load( filepath, function ( geometry ) {
		// var geometry = new THREE.Geometry().fromBufferGeometry( bufferGeometry );


			
		geometry.computeBoundingBox();
		// geometry.mergeVertices();
			// geometry.computeFaceNormals();
			// geometry.computeVertexNormals();


		var dimensions = geometry.boundingBox.max.clone().sub(geometry.boundingBox.min);
		var min = geometry.boundingBox.min.clone().add(dimensions.multiplyScalar(0.5)).multiplyScalar(-1);
			centerMatrix = new THREE.Matrix4().makeTranslation(min.x, min.y, min.z);

		var mesh = new THREE.Mesh( geometry, lambertMaterial );
		

		mesh.updateMatrix(); 
		mesh.geometry.applyMatrix( centerMatrix );
		mesh.matrix.identity();

		mesh.geometry.verticesNeedUpdate = true;
		mesh.rotation.y += Math.PI/4 * 6;
		bake(mesh);

		mesh.castShadow = true;
		mesh.receiveShadow = true;
		env.scene.add( mesh );
		stl = mesh;
		dim = new DimensionsPreview(env.container);
		dim.set(dimensions.x, dimensions.y, dimensions.z);



		carpal = new Carpal(env, 0.10, 5);
		gui = new dat.GUI();
		var divisionsController = gui.add(carpal, "divisions");
		var layerHeightController = gui.add(carpal, "layer_height");
		var filamentController = gui.add(carpal, "filament_profile", configs);
		var generateController = gui.add(carpal, "generate");
		var bakeController = gui.add(carpal, "bake");
		var rotationXController = gui.add(mesh.rotation, "x", 0, 2 * Math.PI).step(Math.PI/4);
		var rotationYController = gui.add(mesh.rotation, "y", 0, 2 * Math.PI).step(Math.PI/4);
		var rotationZController = gui.add(mesh.rotation, "z", 0, 2 * Math.PI).step(Math.PI/4);

		var cureController = gui.add(carpal, "cure");
		
		carpal.setModel(stl);
	} );

	
});

function Carpal(env, layer_height, divisions){
	this.layer_height = layer_height;
	this.divisions = divisions;
	this.env = env;
	this.filament_profile = "high_PLA"; 
}

Carpal.prototype = {
	bake: function(){
		bake(stl);
	},
	cure: function(stl, config){
		HapticPrintCura.curify(stl, this.filament_profile);
	},
	generate: function(){

		var planeWidth = this.getDimensions().x * 1.1;
		var planeHeight = this.getDimensions().y * 1.1;
		var planeGeo = new THREE.PlaneGeometry( planeWidth, planeHeight, 20, 20) ;
		var mesh = new THREE.Mesh(planeGeo, lambertMaterial);


		var meshHeight = this.getDimensions().z;
		var start = this.model.geometry.boundingBox.min.z;
		var end = this.model.geometry.boundingBox.max.z;
		var step = meshHeight/this.divisions;

		this.planes = [];
		var ct; 
		for(var i = start; i <= end; i+= step){
			var plane = planeGeo.clone();
			var mesh = new THREE.Mesh(planeGeo, lambertMaterial2);
			mesh.position.z = i;
			ct = new CarpalTunnel(this.planes.length, (i - start)/this.layer_height, mesh);
			this.planes.push(ct);
			ct.addToGUI(gui);
			this.env.scene.add(mesh);
		}
		gui.add(this, "save");
	},
	getDimensions: function(){
		if(typeof stl === "undefined") return;
		this.model.geometry.computeBoundingBox();
		var dimensions = this.model.geometry.boundingBox.max.clone().sub(this.model.geometry.boundingBox.min);
		return dimensions;
	},
	setModel: function(stl){
		this.model = stl;

	},
	toString: function(){
		console.log("I am carpal with", layer_height, "mm height and", divisions, "divisions");

	},
	save: function(callback){
		this.bake();

		stl_geom = new THREE.Geometry().fromBufferGeometry( stl.geometry );
		var stl_data = AsciiStlWriter.toString(stl_geom);
		var data = $.map(this.planes, function(el, i){
			return el.data();
		}).join('\n');
		// var json = JSON.stringify(data);
		// var blob = new Blob([data], {type: "txt/csv"});
		// var url  = URL.createObjectURL(blob);
	    // var formData = new FormData();
    	// formData.append('file', blob);
    	var scope = this;
      $.ajax({
        url :  "/internal/tmp_save",
        type: 'POST',
        data: {csv: data, 
        	   stl: stl_data},
        dataType: "json",
        success: function(data) {
          console.log("boa!", data);
          scope.cure(data.stl);
        },    
        error: function() {
          console.log("not so boa!");
        }
      });


		// var a = document.createElement('a');
		// a.download    = "backup.json";
		// a.href        = url;
		// a.textContent = "Download backup.json";
		// $(a).click();


    	// FileSaver.js defines `saveAs` for saving files out of the browser
    	// saveAs(blob, "carpal.csv");
	}
}


function HapticPrintCura(){}

HapticPrintCura.curify = function(stl, config, csv){
	name = stl.split('.')[0];
	name = name.split('/');
	name = name[name.length - 1]
	$.ajax({
	   method: 'POST',
	   url: '/internal/cure',
	   data: {
	      stl: stl, 
	      config: config, 
	      // internals: csv, 
	      name: name
	   },
	   error: function() {
	      console.log("No bueno!")

	   },
	   dataType: "json",
	   success: function(data) {
	     console.log("Win!", data);

	     
	     	var link = $('<a download="hapticprint.gcode">Download</a>')
		     	.attr('href', data.gcode)
		     	.addClass('btn btn-primary btn-lg')
		     	.html('GCODE')
		     	.css({
		     		position: 'absolute', 
		     		top: 5, 
		     		left: 5
		     	});
	     	$('body').append(link);
	   }
	});
}





function CarpalTunnel(id, layer, mesh){
	this.id = id;
	this.layer = layer;
	this.mesh = mesh;
	this.pattern = "INFILL_GRID";
	this.density = 0.18;
}
CarpalTunnel.patterns = ["INFILL_AUTOMATIC",
		"INFILL_GRID",
		"INFILL_LINES",
		"INFILL_CONCENTRIC",
		"INFILL_DOUBLE_CONCENTRIC",
		"INFILL_CHAMBERED", 
		"INFILL_AXIS_CHAMBERED"];



CarpalTunnel.prototype = {
	addToGUI: function(gui){
		this.folder = gui.addFolder("Chamber" + this.id);
		this.zPosition = this.folder.add(this.mesh.position, "z", this.mesh.position.z -20, this.mesh.position.z + 20);
		this.patternController = this.folder.add(this, "pattern", CarpalTunnel.patterns);
		this.densityController = this.folder.add(this, "density", 0, 1).step(0.01);
	}, 
	data: function(){
		var idx = CarpalTunnel.patterns.indexOf(this.pattern);		
		if(idx == -1)
			console.log("Pattern not found");

		var pattern_id = idx;


		var temp = [this.id, this.layer, pattern_id, this.density];
		return temp.join(",");
		// return {id: this.id, layer: this.layer, pattern: this.pattern, density: this.density};
	}
}




$(window).resize(function(){
	console.log("Resized!");
	THREEx.WindowResize(env.renderer, env.camera);
});


function addStats(container){
	// STATS
	var stats = new Stats();
	stats.domElement.style.position = 'relative';
	stats.domElement.style.top = '-55px';
	stats.domElement.style.left = '0px';
	stats.domElement.style.zIndex = 100;
	container.appendChild( stats.domElement );
	return stats;
}

function addAxes(env){
		var xlineMaterial = new THREE.LineBasicMaterial({
        	color: 0xff1111, 
	        linewidth: 5
	    });

	    var lineMaterial = new THREE.LineBasicMaterial({
	        color: 0x1111ff, 
	        linewidth: 5
	    });
	   
	    var zlineMaterial = new THREE.LineBasicMaterial({
	        color: 0x11ff11, 
	        linewidth: 5
	    });
		var line_mag = 1000;
		var geometry = new THREE.Geometry();
	    geometry.vertices.push(new THREE.Vector3(0, -1 * line_mag, 0));
	    geometry.vertices.push(new THREE.Vector3(0, 0, 0));
	    geometry.vertices.push(new THREE.Vector3(0, line_mag, 0));
        var yline = new THREE.Line(geometry, lineMaterial);
        env.scene.add(yline);

        var geometry = new THREE.Geometry();
	    geometry.vertices.push(new THREE.Vector3(-1 * line_mag, 0, 0));
	    geometry.vertices.push(new THREE.Vector3(0, 0, 0));
	    geometry.vertices.push(new THREE.Vector3(line_mag, 0,  0));
        var xline = new THREE.Line(geometry, xlineMaterial);
        env.scene.add(xline);

        var geometry = new THREE.Geometry();
	    geometry.vertices.push(new THREE.Vector3(0, 0, -1 * line_mag));
	    geometry.vertices.push(new THREE.Vector3(0, 0, 0));
	    geometry.vertices.push(new THREE.Vector3(0, 0, line_mag));
        var zline = new THREE.Line(geometry, zlineMaterial);
        env.scene.add(zline);
}

function bake(mesh){
	mesh.updateMatrix(); 
	mesh.geometry.applyMatrix( mesh.matrix );
	mesh.matrix.identity();
	// If you have previously rendered, you will have to set the needsUpdate flag:

	mesh.geometry.verticesNeedUpdate = true;
	// Then reset the position, rotation, and scale properties to their initial values:

	mesh.position.set( 0, 0, 0 );
	mesh.rotation.set( 0, 0, 0 );
	mesh.scale.set( 1, 1, 1 );
	console.log("Baked!");
}
</script>

<style type="text/css">
	#texture-render{
		display: none;
	}
</style>
<div class="threejs_container">
<div id="ThreeJS" ></div>
</div>
