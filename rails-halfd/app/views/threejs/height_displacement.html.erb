<%= javascript_include_tag 'metamorphehalf/planebox', 'data-turbolinks-track' => true %>


<style type="text/css">
	html, body{
		height: 100% !important;
	}
</style>
<script type="text/javascript">
var tc, storage, alert, depthWorker;

$(function(){
	initWorkers();
	storage = new WebStorage();
	tc = new TactileController();
	alert = new UIAlert(tc.env.container);
	configureGUI(tc);
	tc.init();
	
});

function workPackage(texture, geom){
	var image = texture.image;
	var height = image.height;
	var width = image.width;

	if(! texture.rgb_calculated) texture.calculateRGB();
	this.pixels = texture.imgCanvas.getImageData(0, 0, height, width);
	this.faces = geom.faces;
	this.faceVertexUvs = geom.faceVertexUvs;
}

function initWorkers(){
	depthWorker = new Worker('/assets/metamorphehalf/ScanWorker.js');
}

function TactileController(){
	this.texture = GET().texture || "corn";
	this.engine = GET().engine || "shade";
	this.current_model;
	this.magnitude = 20.0;
	this.loaded = {};
	this.env = new WebEnv($("#ThreeJS"));
	
	this.preview = new ImagePreview(this.env.container, textureMap[this.texture]);

}

TactileController.textures =  <%= @files %>;

TactileController.prototype = {
	init: function(){
		var self = this;
		this.load();
	},
	load:function(){
		console.log("Loading", this.texture, "on", this.engine);
		var self = this;

		var model = this.loaded[this.texture];
		if(typeof model === "undefined") model = new TactileModel(textureMap[this.texture], 
			70, 70, 1, 300, self.magnitude);
		model.load(this.engine, this.add, self);
	},
	add: function(tc, model){
		console.log("Added " + model.name);
		tc.clear();
		tc.current_model = model;
		tc.env.scene.add(tc.current_model[tc.engine].obj.mesh);
		tc.preview.swap(textureMap[tc.texture]);
		tc.mag();
		alert.hide();
		hist = generateURL();
		history.pushState({}, hist.title, hist.href);
	}, 
	switch: function(){
		console.log("Switching to", textureMap[this.texture]);
		var self = this;
		this.load();
	},
	mag: function(){
		this.current_model.mag(this.engine, this.magnitude);
	},
	clear: function(){
		console.log("Cleared the stage.");
		if(typeof this.current_model === "undefined") return; 
		if(typeof this.current_model.bump.obj !== "undefined")
			this.env.scene.remove(this.current_model.bump.obj.mesh);
		if(typeof this.current_model.shade.obj !== "undefined")
			this.env.scene.remove(this.current_model.shade.obj.mesh);
	}, 
	save: function(){
		// TODO: trigger change with controller
		// this.engine = "bump";
		// tc.switch();
		var self = this;
		this.current_model.save(this.texture);
	}, 
	clear_cache: function(){
		storage.clear();
	}
}


function TactileModel(texture, h, w, d, resolution, mag){
	this.name = texture;
	this.path = textureMap[texture];
	this.shade = new ShaderBumpBox(texture, mag, h, w, d, resolution);   
	this.bump = new LambertBumpBox(texture, mag,  h, w, d, resolution);
}

TactileModel.prototype = {
	load: function(engine, fn, tc){
		// load routine for model
		var self = this;
		this[engine].load(function(){
			console.log("Passing back", engine, self.name);	
			fn(tc, self);
		});
	}, 
	mag: function(engine, mag){
		// this[engine].position.x = mag;
		this[engine].raise(mag);
	},
	save: function(name){
		console.log("Saved!");
		this.bump.save(name);
	}
}
var textureNames = $.map(TactileController.textures, function(el, i){
			var path_tokens = el.split('/');
			return path_tokens[path_tokens.length - 1].split(".")[0];
		});
var textureMap = {};

function configureGUI(tc){
	$.each(TactileController.textures, function(i, el){
			var path_tokens = el.split('/');
			var name = path_tokens[path_tokens.length - 1].split(".")[0];
			textureMap[name] = el;
	});

	var gui = new dat.GUI();

	var texture = gui.add(tc, 'texture', textureNames);

	texture.onChange(function(){
		tc.switch();
		// model.map(model.filename);
		// img_preview.swap(model.directory + model.filename);
	});

	var engineController = gui.add(tc, 'engine', ["shade", "bump"]);
	engineController.onChange(function(){ tc.switch(); });

	var magnitudeController = gui.add(tc, 'magnitude', 0, 30);
	magnitudeController.onChange(function(){ tc.mag(); });

	var clear_cache = gui.add(tc, 'clear_cache');
	// export
	var exporter = gui.add(tc, 'save');

}

function generateURL(){
	return {
		title: tc.texture + " rendered as " + tc.engine,
		href: "height_displacement?engine=" + tc.engine +"&" + "texture=" + tc.texture
		}
}
</script>

<style type="text/css">
	#texture-render{
		display: none;
	}
</style>
<div class="threejs_container">
<div id="ThreeJS" ></div>
</div>
<canvas id="texture-render" ></canvas>
