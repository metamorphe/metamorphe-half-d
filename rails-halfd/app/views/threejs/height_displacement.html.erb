<%= javascript_include_tag 'metamorphehalf/planebox', 'data-turbolinks-track' => true %>


<%= render :partial => "shader" %>
<style type="text/css">
	html, body{
		height: 100% !important;
	}
</style>
<script type="text/javascript">
var tc;
$(function(){
	tc = new TactileController();
	configureGUI(tc);
})
function TactileController(){
	this.texture = "";
	this.current_model;
	this.magnitude = 20.0;
	this.loaded = {};
	this.storage = new WebStorage();
	this.env = new WebEnv($("#ThreeJS"));
	this.engine = "bump";

	this.init();
}

TactileController.textures =  <%= @files %>;

TactileController.prototype = {
	init: function(){
		var self = this;
		this.texture = TactileController.textures[0];
		this.load();
	},
	load:function(){
		console.log("Loading", this.texture, "on", this.engine);
		var self = this;

		var model = this.loaded[this.texture];
		if(typeof model === "undefined") model = new TactileModel(this.texture, 100, 100, 5, 100);
		this.current_model = model;
		model.load(this.engine, this.add, self);
	},
	add: function(tc, model){
		console.log("Added " + model.name);
		tc.env.scene.add(model[tc.engine]);
		tc.mag();
	}, 
	switch: function(){
		console.log("Switching to", this.texture);
		var self = this;
		this.clear();
		this.load(this.texture);
	},
	mag: function(){
		this.current_model.mag(this.engine, this.magnitude);
	},
	clear: function(){
		console.log("Cleared the stage.");
		this.env.scene.remove(this.current_model[this.engine]);
	}, 
	save: function(){
		// TODO: trigger change with controller
		this.engine = "bump";
		tc.switch();
		var self = this;
		this.current_model.save(function(){
			console.log("Saving", self.current_model.name);			
		});

	}
}


function TactileModel(texture, h, w, d, resolution){
	this.name = texture.split(".")[0];
	this.path = texture;
	var geomA = new THREE.BoxGeometry(50, 100, 50, 1, 1, 1);
	var geomB = new THREE.BoxGeometry(50, 50, 100, 1, 1, 1);
	var matA = new THREE.MeshLambertMaterial({
		color: new THREE.Color(0xffffff)
	});
	var matB = new THREE.MeshLambertMaterial({
		color: new THREE.Color(0xff00ff)
	});
	this.shade = new THREE.Mesh(geomA, matA); //TactileGenerator("shader", texture, h, w, d, h_s, w_s);
	this.bump = new THREE.Mesh(geomB, matB); //TactileGenerator("bump_map", texture, h, w, d, h_s, w_s);

}

TactileModel.prototype = {
	load: function(engine, fn, tc){
		// load routine for model
		// this[engine].load(fn);
		console.log("Passing back", engine, this.name);
		fn(tc, this);
	}, 
	mag: function(engine, mag){
		this[engine].position.x = mag;
	},
	save: function(fn){
		console.log("Saved!");
		fn();
	}
}

function configureGUI(tc){
	var gui = new dat.GUI();

	var texture = gui.add(tc, 'texture', TactileController.textures );

	texture.onChange(function(){
		tc.switch();
		// model.map(model.filename);
		// img_preview.swap(model.directory + model.filename);
	});

	var engineController = gui.add(tc, 'engine', ["shade", "bump"]);
	engineController.onChange(function(){ tc.switch(); });

	var magnitudeController = gui.add(tc, 'magnitude', 0, 30);
	magnitudeController.onFinishChange(function(){ tc.mag(); });

	// export
	var exporter = gui.add(tc, 'save');
}

</script>

<style type="text/css">
	#texture-render{
		display: none;
	}
</style>
<div class="threejs_container">
<div id="ThreeJS" ></div>
</div>
<canvas id="texture-render" ></canvas>
